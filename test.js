// ถ้าต้องการ select p elements ทั้งหมดที่อยู่ใน div element ต้องเขียนอย่างไร
// div p

// -------------------------------------------------------------------------------------

// HTML Element ไหนที่ใช้สำหรับใส่ Code JavaScript *
{
  /* <script> */
}

// -------------------------------------------------------------------------------------

// ใน JavaScript การเปรียบเทียบ String จะได้ว่า "Good" > "Gold"
// console.log('Good' > 'Gold');
// True; เทียบไปทีละตัวถึง O กับ  L

// -------------------------------------------------------------------------------------

// alert(undefined || null || 0);
// undefined  null 0 แปลงเป็น Boolean แล้วเป็น false

// -------------------------------------------------------------------------------------

// Babel ทำหน้าที่อะไร
// แปลง Code เวอร์ชั่นใหม่ให้อยู่ในรูปเวอร์ชั่นเก่าทั้งหมด

// -------------------------------------------------------------------------------------

// let user = { name: 'John' };

// let admin = user;

// admin.name = 'Pete';
// alert(user.name);
//ชี้ไปที่ obj ตัวเดียวกัน นับว่าค่าเท่ากัน เมื่อแก้ไขตัวไดตัวหนึ่ง อีกตัวก็จะมีค่าเท่ากัน

// -------------------------------------------------------------------------------------

// console.log('Widget'.startsWith('wid'));
// case sensitive w ต้องตัวใหญ

// -------------------------------------------------------------------------------------

// let arr = ['I', 'study', 'JavaScript', 'right', 'now'];
// arr.splice(0, 3, "Let's", 'dance');
// alert(arr);
// ["Let's", 'dance', 'right', 'now']
// ไปตัดตัวที่3ด้วยเลยผิด

// -------------------------------------------------------------------------------------

// document.getElementBy;
//เข้าใจไปว่าพวก document.getElementBy คือคำสั่งที่ใช้ค้นหาและเลือก

// -------------------------------------------------------------------------------------

// var var1 = "undefined";
// var var2 = null;
// var var3 = 15;
// var var4;

// var x = var1 || var3 || var2 || var4;
// var x = var2 || var4 || var3 || var1;
// console.log(x);

// ลืมไปว่า "undefined" มันเป็น string มันมีค่าเป็น true มันจึงใช้ค่าแรกเลย

// -------------------------------------------------------------------------------------

// var num1 = 100 / 0; // Infinity
// var num2 = '100' / 5; // 4
// var condition1 = typeof num1 == typeof num2;
// var condition2 = typeof num1 === typeof num2;

// console.log(condition1);
// console.log(condition2);
// ตอนแรกผมมองว่าเทียบ value Infinity กับ 4 ซึ่งมันไม่เท่ากัน
// แต่มันเป็นการเทียบ type ซึ่งมันเป็น number ทั้งคู่

// -------------------------------------------------------------------------------------

// จงเลือก code ที่ใช้เพิ่ม event listener ของการ click ภายใน <div> ที่มี id = "content" และจะเรียกใช้งานฟังก์ชัน handleClick *
// ไปเอ๋อกับ event listener เพราะช่วงหลังไปเลียกพวด event ต่างๆเป็น evelHandler
// เลยไม่แน่ใจว่ามันอยู่ต่างที่แล้สมันจะเรีกเหมือนกันไหม เลยคิดไปเองว่าถ้ามันอยู่ใน
// document.getElementById("content").onclick = handleClick();
// จะเรียกว่า event listener

// -------------------------------------------------------------------------------------

// const x = 0;
// try {
//   x = 5;
//   console.log('Try x');
// } catch (e) {
//   console.log('Error x');
// } finally {
//   console.log('Finally x');
// }
// const ต้องใส่ค่าให้มันเสมอ แต่ถ้าใช้let ไม่ต้องประกาสค่าก็ได้

// -------------------------------------------------------------------------------------

// var x;
// true && (x = 1);
// console.log(x); // 1
// x++;
// console.log(x); // 2
// false && (x += 10);
// console.log(x); // 2

// เพราะใช้ && เมื่อเจอ true จะไปทำงายตัวต่อไป
// แต่ถ้าเจอ false มันจะข้ามไปเลย

// -------------------------------------------------------------------------------------

// const a = c => c;
// const b = c => c;
// console.log(a);
// console.log(a(7));
// console.log(b(7));
// console.log(a === b);
// console.log(a(7) === b(7));

//ไม่เข้าใจ

// -------------------------------------------------------------------------------------

// const myFunc = num1 => num2 => num1 * num2;
// //เป็น parameter แยกกัน
// myFunc(4)(5);

// -------------------------------------------------------------------------------------

// let { a, b, ...c } = { a: 1, b: 2, c: 3, d: 4 };
// console.log(a);
// console.log(b);
// console.log(c);
// a เก็บค่า  1  b เก็บค่า 2
// ...c เก็บค่าที่เหลือเป็น object

// -------------------------------------------------------------------------------------

// มันมีแค่ function setInterval
// timeout กับ delay  ไม่มี

// -------------------------------------------------------------------------------------

// pending, resolved, rejected;
// ลืมไป1สถานะ

// -------------------------------------------------------------------------------------

// class Car extends React.Component {
//   constructor() {
//     super();
//     this.state = { color: 'red' };
//   }
//   render() {
//     return <h2>I am a Car!</h2>;
//   }
// }

// ต้องประกาศ
// constructor() {
//     super();

//   }
// ก่อน render()

// -------------------------------------------------------------------------------------

// console.log(10 + '5');
// +-*/ ถ้าเป็น + str จะกลายเป็น str ต่อกัน

// -------------------------------------------------------------------------------------

// var eatsPlants = false;
// var eatsAnimals = true;
// var category = eatsPlants
//   ? eatsAnimals
//     ? 'omnivore'
//     : 'herbivore'
//   : eatsAnimals
//   ? 'carnivore'
//   : 'undefined';
// console.log(category);
// category เป็น false ไปทำงานหลัง :
// เจอ eatsAnimals เป็น true ทำง่นคัวแรกเลยได้
// carnivore

// -------------------------------------------------------------------------------------

// Math.sum(e, c);
// มันไม่มี Math.sum

// -------------------------------------------------------------------------------------

// วิธีเช็คว่าตอนนี้เราอยู่ที่ Branch ไหน เราจะต้องใช้คำสั่งอะไร
// git branch
// ลืม

// -------------------------------------------------------------------------------------

// ที่เก็บข้อมูลภายในของ component
// เข้าใจไปว่า ข้อมูลไม่หายทุกครั้งที่ rerender คือ่เก็บข้อมูลแบบถาวร
// กับ การประกาศ usestate ไว้ด้านบนสุดแล้วสามารถเรียกใช้ตรงไหนก็ได้
// คือ global
// ซึ่งผมลืมไปว่าบนสุดนั้นยังอยู่ไต้ function

// -------------------------------------------------------------------------------------

{
  /* <h1>{displayName()}</h1>;
ตามโจทย์ เรียกใช้ () ตอนทำจำได้ว่าตอบข้อนี้ */
}

// -------------------------------------------------------------------------------------

// render() {
//   let langs = ["JavaScript", "PHP", "C#"]
//   return (<div>
//     {langs.map(lang => <p>{lang}</p>)}
//   </div>)
// }
// // ข้อใดคือผลลัพธ์ที่เกิดจากเมธอด render() ของ #CODE 1 *
// ข้อนี้จำรูปแบบไม่ได้ แลพไม่คุ้นกับการประกาศตัวแปรและใช้.map ใน render เลยมั่ว

// -------------------------------------------------------------------------------------

// จงเลือกวิธีที่ใช้ในการจัดการ click event ของปุ่ม *
// <button onclick={this.onClickHandler()}>
// <button onclick={this.onClickHandler}>
// <button onClick={this.onClickHandler()}>
// <button onClick={this.onClickHandler}>

// ข้อ2กับ4 มันอันเดียวกัน

// -------------------------------------------------------------------------------------

// จงเลือกวิธีการเขียน style ที่ถูกต้องภายใน JSX *

// style={{ margin: '1rem' }}>
// จำไปว่ามันใส่ หน่วยได้ แต่ลืมไปว่า ถ้าจะใส่หน่วย ต้องเป็น string

// -------------------------------------------------------------------------------------

// จงเรียงลำดับการทำงาน Class Component Lifecycle method ในเฟส mounting
// จากข้อที่แล้วมา ลืมการมีอยู่ของ constructor  ไปว่ามันประกาศไว้ตรงไหน

// -------------------------------------------------------------------------------------

// class Count extends Component {
//   state = {
//     count: 0,
//     loading: true,
//   };
//   render() {
//     return (
//       <button onClick={() => this.setState({ count: this.state.count - 1 })}>
//         Add
//       </button>
//     );
//   }
// }

// จาก #CODE4 เมื่อ click Add button 1 ครั้ง ค่า state จะมีค่าเท่าใด
// เข้าใจไปว่า ค่าที่ถามคือ count ตัวเดียว เพราะ loading ไม่มีการเปลี่ยนแปลง
// แต่loading: อยู่ใน state เดียวกัน จึงต้องเอามาด้วย

// -------------------------------------------------------------------------------------

// ประกาศ const [count, setCount] = useState(0); ข้อใดเป็นการ update state count ที่ถูกต้อง *
// setCount(count => count + 1);
// เป็นอีกข้อที่เข้าใจว่าตนเองตอบ setCount(count => count + 1); แต่ไม่ใช่

// -------------------------------------------------------------------------------------
